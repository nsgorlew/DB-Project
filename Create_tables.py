{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3149cb5d-aecd-40a3-b98f-4a7b5cca6349",
   "metadata": {},
   "outputs": [],
   "source": [
    "import psycopg2\n",
    "import config\n",
    "from configparser import ConfigParser\n",
    "import csv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2f5996e1-2613-4d6f-aeaa-865ef6e68bfe",
   "metadata": {},
   "outputs": [],
   "source": [
    "# from configparser import ConfigParser\n",
    "def config(filename='database.ini', section='postgresql'):\n",
    "    # create a parser\n",
    "    parser = ConfigParser()\n",
    "    # read config file\n",
    "    parser.read(filename)\n",
    "\n",
    "    # get section, default to postgresql\n",
    "    db = {}\n",
    "    if parser.has_section(section):\n",
    "        params = parser.items(section)\n",
    "        for param in params:\n",
    "\n",
    "            db[param[0]] = param[1]\n",
    "    else:\n",
    "        raise Exception('Section {0} not found in the {1} file'.format(section, filename))\n",
    "\n",
    "    return db"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3fd0975e-2d9e-43fa-a0df-93f343c32897",
   "metadata": {},
   "outputs": [],
   "source": [
    "def connect():\n",
    "    \"\"\" Connect to the PostgreSQL database server \"\"\"\n",
    "    conn = None\n",
    "    try:\n",
    "        # read connection parameters\n",
    "        params = config()\n",
    "\n",
    "        # connect to the PostgreSQL server\n",
    "        print('Connecting to the PostgreSQL database...')\n",
    "        conn = psycopg2.connect(**params)\n",
    "\t\t\n",
    "        # create a cursor\n",
    "        cur = conn.cursor()\n",
    "        \n",
    "\t# execute a statement\n",
    "        print('PostgreSQL database version:')\n",
    "        cur.execute('SELECT version()')\n",
    "        cur.execute('SELECT current_database()')\n",
    "\n",
    "        # display the PostgreSQL database server version\n",
    "        db_version = cur.fetchone()\n",
    "        print(db_version)\n",
    "       \n",
    "        # close the communication with the PostgreSQL\n",
    "        cur.close()\n",
    "    except (Exception, psycopg2.DatabaseError) as error:\n",
    "        print(error)\n",
    "    finally:\n",
    "        if conn is not None:\n",
    "            conn.close()\n",
    "            print('Database connection closed.')\n",
    "\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    connect()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "bcc176c9-7ec5-4e3a-b942-1bf92744e890",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "'module' object is not callable\n"
     ]
    }
   ],
   "source": [
    "def create_tables():\n",
    "    \"\"\" create tables in the PostgreSQL database\"\"\"\n",
    "    commands = (\n",
    "          \"\"\"\n",
    "          CREATE TABLE Publisher (\n",
    "                PublisherId VARCHAR(255) NOT NULL,\n",
    "                PubName VARCHAR(255),\n",
    "                Address VARCHAR(255),\n",
    "                PRIMARY KEY (PublisherId)\n",
    "          )\n",
    "          \"\"\",\n",
    "          \"\"\"\n",
    "          CREATE TABLE Person (\n",
    "                PId VARCHAR(75) NOT NULL,\n",
    "                PName VARCHAR(75),\n",
    "                PRIMARY KEY (PId)\n",
    "                )\n",
    "         \"\"\"\n",
    "         )\n",
    "    \n",
    "    conn = None\n",
    "    try:\n",
    "        # read the connection parameters\n",
    "        params = config()\n",
    "        # connect to the PostgreSQL server\n",
    "        conn = psycopg2.connect(**params)\n",
    "        cur = conn.cursor()\n",
    "        # create table one by one\n",
    "        for command in commands:\n",
    "            cur.execute(command)\n",
    "        # close communication with the PostgreSQL database server\n",
    "        cur.close()\n",
    "        # commit the changes\n",
    "        conn.commit()\n",
    "        print('Query successfully executed')\n",
    "    except (Exception, psycopg2.DatabaseError) as error:\n",
    "        print(error)\n",
    "    finally:\n",
    "        if conn is not None:\n",
    "            conn.close()\n",
    "\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    create_tables()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d16ef0ee-54a3-48f6-84b5-b5f523a311c4",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def create_tables():\n",
    "    \"\"\" create tables in the PostgreSQL database\"\"\"\n",
    "    commands = (\n",
    "        \"\"\"\n",
    "        CREATE TABLE Document (\n",
    "            DocId uuid DEFAULT uuid_generate_v4(),\n",
    "            Title VARCHAR(255),\n",
    "            PDate DATE,\n",
    "            PublisherId VARCHAR(255),\n",
    "            PRIMARY KEY (DocId),\n",
    "            FOREIGN KEY (PublisherId)\n",
    "            REFERENCES Publisher (PublisherId)\n",
    "            ON UPDATE CASCADE ON DELETE CASCADE\n",
    "        )\n",
    "        \"\"\",\n",
    "        \"\"\"\n",
    "        CREATE TABLE Book (\n",
    "                DocId uuid NOT NULL,\n",
    "                ISBN VARCHAR(255),\n",
    "                PRIMARY KEY (DocId),\n",
    "                FOREIGN KEY (DocId)\n",
    "                REFERENCES Document (DocId)\n",
    "                ON UPDATE CASCADE ON DELETE CASCADE\n",
    "        )\n",
    "        \"\"\",\n",
    "        \"\"\"\n",
    "        CREATE TABLE Journal_Volume (\n",
    "                DocId uuid NOT NULL,\n",
    "                Volume_No VARCHAR(75),\n",
    "                Editor VARCHAR(75),\n",
    "                PRIMARY KEY (DocId),\n",
    "                FOREIGN KEY (DocId)\n",
    "                REFERENCES Document (DocId)\n",
    "                ON UPDATE CASCADE ON DELETE CASCADE,\n",
    "                FOREIGN KEY (Editor)\n",
    "                REFERENCES Person (PId)\n",
    "                ON UPDATE CASCADE ON DELETE CASCADE\n",
    "                )\n",
    "        \"\"\",\n",
    "        \"\"\"\n",
    "        CREATE TABLE Journal_Issue (\n",
    "                DocId uuid NOT NULL,\n",
    "                Issue_No VARCHAR(75) NOT NULL,\n",
    "                Scope VARCHAR(75),\n",
    "                PRIMARY KEY (DocId, Issue_No),\n",
    "                FOREIGN KEY (DocId)\n",
    "                REFERENCES Journal_Volume (DocId)\n",
    "                ON UPDATE CASCADE ON DELETE CASCADE\n",
    "                )\n",
    "        \"\"\",\n",
    "        \"\"\"\n",
    "        CREATE TABLE Proceedings (\n",
    "                DocId uuid NOT NULL,\n",
    "                CDate DATE,\n",
    "                CLocation VARCHAR(75),\n",
    "                CEditor VARCHAR(75),\n",
    "                PRIMARY KEY (DocId),\n",
    "                FOREIGN KEY (DocId)\n",
    "                REFERENCES Document (DocId)\n",
    "                ON UPDATE CASCADE ON DELETE CASCADE\n",
    "                )\n",
    "        \"\"\",\n",
    "        \"\"\"\n",
    "        CREATE TABLE Authors (\n",
    "                PId VARCHAR(75) NOT NULL,\n",
    "                DocId uuid NOT NULL,\n",
    "                PRIMARY KEY (PId, DocId),\n",
    "                FOREIGN KEY (DocId)\n",
    "                REFERENCES Book (DocId)\n",
    "                ON UPDATE CASCADE ON DELETE CASCADE,\n",
    "                FOREIGN KEY (PId)\n",
    "                REFERENCES Person (PId)\n",
    "                ON UPDATE CASCADE ON DELETE CASCADE\n",
    "                )\n",
    "        \"\"\",\n",
    "        \"\"\"\n",
    "        CREATE TABLE GEdits (\n",
    "                DocId uuid NOT NULL,\n",
    "                Issue_No VARCHAR(75) NOT NULL,\n",
    "                PId VARCHAR(75) NOT NULL,\n",
    "                PRIMARY KEY (DocId, Issue_No, PId),\n",
    "                FOREIGN KEY (PId)\n",
    "                REFERENCES Person (PId)\n",
    "                ON UPDATE CASCADE ON DELETE CASCADE\n",
    "                )\n",
    "        \"\"\"\n",
    "#               FOREIGN KEY (DocId)\n",
    "#               REFERENCES Journal_Issue (DocId)\n",
    "#               ON UPDATE CASCADE ON DELETE CASCADE, \n",
    "#               FOREIGN KEY (Issue_No)\n",
    "#               REFERENCES Journal_Issue (Issue_No)\n",
    "#               ON UPDATE CASCADE ON DELETE CASCADE,\n",
    "#         ,        \n",
    "        \"\"\"\n",
    "        CREATE TABLE Chairs (\n",
    "                DocId uuid NOT NULL,\n",
    "                PId VARCHAR(75) NOT NULL,\n",
    "                PRIMARY KEY (DocId, PId),\n",
    "                FOREIGN KEY (DocId)\n",
    "                REFERENCES Proceedings (DocId)\n",
    "                ON UPDATE CASCADE ON DELETE CASCADE,\n",
    "                FOREIGN KEY (PId)\n",
    "                REFERENCES Person (PId)\n",
    "                ON UPDATE CASCADE ON DELETE CASCADE\n",
    "                )\n",
    "        \"\"\"\n",
    "      )\n",
    "    \n",
    "    conn = None\n",
    "    try:\n",
    "        # read the connection parameters\n",
    "        params = config()\n",
    "        # connect to the PostgreSQL server\n",
    "        conn = psycopg2.connect(**params)\n",
    "        cur = conn.cursor()\n",
    "        # create table one by one\n",
    "        for command in commands:\n",
    "            cur.execute(command)\n",
    "        # close communication with the PostgreSQL database server\n",
    "        cur.close()\n",
    "        # commit the changes\n",
    "        conn.commit()\n",
    "        print('Query successfully executed')\n",
    "    except (Exception, psycopg2.DatabaseError) as error:\n",
    "        print(error)\n",
    "    finally:\n",
    "        if conn is not None:\n",
    "            conn.close()\n",
    "\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    create_tables()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
